---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-%s" (include "synapse.fullname" .) "config" }}
  labels:
    {{- include "synapse.labels" . | nindent 4 }}
data:
  homeserver.yaml: |-
    server_name: {{ .Values.homeserver.server_name }}
    listeners:
      - port: {{ .Values.service.containerPort }}
        tls: false
        type: http
        x_forwarded: true
        bind_addresses: ["0.0.0.0"]
        resources:
          - names: [client, federation]
            compress: false
    {{- if eq "sqlite" .Values.database.type }}
    database:
      name: sqlite3
      args:
        database: /synapse/homeserver.db
    {{- end }}
    log_config: /synapse/logging.yaml
    report_stats: {{ .Values.homeserver.report_stats }}
    {{- with omit .Values.homeserver "report_stats" "report_stats" "database" "macaroon_secret_key" "registration_shared_secret" "form_secret" }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  logging.yaml: |-
    version: 1
    formatters:
      precise:
        format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'
    handlers:
      file:
        class: logging.handlers.TimedRotatingFileHandler
        formatter: precise
        filename: {{ .Values.logging.buffer.location }}
        when: midnight
        backupCount: 3
        encoding: utf8
      buffer:
        level: {{ .Values.logging.buffer.level }}
        class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
        target: file
        capacity: 10
        flushLevel: 30
        period: 5
      console:
        level: {{ .Values.logging.console.level }}
        class: logging.StreamHandler
        formatter: precise
    loggers:
      synapse.storage.SQL:
        level: INFO
    root:
      level: {{ default "INFO" .Values.logging.level }}
      handlers:
      {{- range .Values.logging.handlers }}
        - {{ . }}
      {{- end }}
    disable_existing_loggers: false
